name: Deploy to Cloudflare Workers

on:
  push:
    branches: [main]
  workflow_dispatch: # ÊâãÂãïÂÆüË°å„ÇÇÂèØËÉΩ

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.repository == 'keichan110/snow-school-scheduler' # ÊÑèÂõ≥„Åó„Å™„ÅÑfork„Åß„ÅÆÂÆüË°åÈò≤Ê≠¢
    env:
      PRISMA_DUMMY_DATABASE_URL: file:./tmp/prisma-deploy.db # D1Êú¨Áï™„Å®„ÅØÁÑ°Èñ¢‰øÇ„Å™CIÂ∞ÇÁî®„ÉÄ„Éü„Éº

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate
        env:
          DATABASE_URL: ${{ env.PRISMA_DUMMY_DATABASE_URL }}

      - name: Validate Prisma schema
        run: npx prisma validate
        env:
          DATABASE_URL: ${{ env.PRISMA_DUMMY_DATABASE_URL }}

      - name: Load NEXTAUTH_URL from wrangler.toml
        run: |
          python - <<'PY' >> "$GITHUB_ENV"
          import tomllib
          from pathlib import Path

          with Path('wrangler.toml').open('rb') as f:
            config = tomllib.load(f)

          value = config.get('vars', {}).get('NEXTAUTH_URL')
          if not value:
            raise SystemExit('NEXTAUTH_URL not found in wrangler.toml')

          print(f"NEXTAUTH_URL={value}")
          PY

      - name: Build application with OpenNext Cloudflare
        run: npx @opennextjs/cloudflare build
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ env.PRISMA_DUMMY_DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          LINE_CHANNEL_ID: ${{ vars.LINE_CHANNEL_ID }}
          LINE_CHANNEL_SECRET: ${{ secrets.LINE_CHANNEL_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}

      - name: Configure Cloudflare Workers runtime environment
        run: |
          npx wrangler secret put JWT_SECRET <<< "$JWT_SECRET"
          npx wrangler secret put LINE_CHANNEL_ID <<< "$LINE_CHANNEL_ID"
          npx wrangler secret put LINE_CHANNEL_SECRET <<< "$LINE_CHANNEL_SECRET"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          LINE_CHANNEL_ID: ${{ vars.LINE_CHANNEL_ID }}
          LINE_CHANNEL_SECRET: ${{ secrets.LINE_CHANNEL_SECRET }}

      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy

      - name: Prepare D1 migrations
        run: |
          # „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê
          mkdir -p migrations

          # GitHubÂÆüË°åÁï™Âè∑„Çí‰ΩøÁî®„Åó„Å¶„É¶„Éã„Éº„ÇØ„Å™„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥Áï™Âè∑„ÇíÁîüÊàê
          MIGRATION_NUMBER=$(printf "%04d" ${{ github.run_number }})
          MIGRATION_FILE="migrations/${MIGRATION_NUMBER}_schema_sync.sql"

          echo "üéØ Creating D1 migration: $MIGRATION_FILE"

          # Prisma„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥„ÅÆÂ≠òÂú®Á¢∫Ë™ç
          if [ -d "prisma/migrations" ]; then
            echo "-- D1 Database Migration - Schema Synchronization" > $MIGRATION_FILE
            echo "-- Generated on: $(date)" >> $MIGRATION_FILE
            echo "-- GitHub Run: ${{ github.run_number }}" >> $MIGRATION_FILE
            echo "-- Commit: ${{ github.sha }}" >> $MIGRATION_FILE
            echo "" >> $MIGRATION_FILE
            
            # ÂÖ®migration.sql„Éï„Ç°„Ç§„É´„ÇíÊ§úÁ¥¢„Åó„Å¶Áµ±Âêà
            MIGRATION_FILES=$(find prisma/migrations -name "migration.sql" | sort)
            
            if [ -n "$MIGRATION_FILES" ]; then
              echo "üìã Consolidating $(echo "$MIGRATION_FILES" | wc -l) Prisma migrations"
              
              # ÂÜ™Á≠âÊÄß„Çí‰øùË®º„Åô„ÇãSQLÊñá„Å´Â§âÊèõ„Åó„Å¶ËøΩÂä†
              for file in $MIGRATION_FILES; do
                echo "-- Source: $file" >> $MIGRATION_FILE
                
                # ÂÜ™Á≠âÊÄß„ÇíÁ¢∫‰øù„Åô„Çã„Åü„ÇÅ„ÅÆSQLÂá¶ÁêÜ
                sed 's/CREATE TABLE /CREATE TABLE IF NOT EXISTS /g' "$file" | \
                sed 's/CREATE UNIQUE INDEX /CREATE UNIQUE INDEX IF NOT EXISTS /g' | \
                sed 's/CREATE INDEX /CREATE INDEX IF NOT EXISTS /g' >> $MIGRATION_FILE
                
                echo "" >> $MIGRATION_FILE
              done
              
              echo "‚úÖ Created consolidated D1 migration"
              echo "üìä Migration stats:"
              wc -l $MIGRATION_FILE
              
            else
              echo "‚ùå No migration.sql files found"
              exit 1
            fi
          else
            echo "‚ùå Prisma migrations directory not found"
            exit 1
          fi

      - name: Apply D1 database migrations
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: d1 migrations apply snow-school-scheduler --remote

      - name: Verify migration success
        run: |
          echo "‚úÖ D1 migration completed successfully"
          echo "üìä Migration details:"
          echo "  - Run Number: ${{ github.run_number }}"
          echo "  - Commit SHA: ${{ github.sha }}"
          echo "  - Timestamp: $(date)"

      - name: Notify deployment status
        if: failure()
        run: |
          echo "Deployment failed! Check the logs above for details."
          exit 1

  health-check:
    runs-on: ubuntu-latest
    needs: deploy
    if: success()

    steps:
      - name: Health check
        env:
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
        run: |
          echo "Waiting for deployment to be available..."
          sleep 30

          # „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØAPIÂëº„Å≥Âá∫„Åó
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" ${NEXTAUTH_URL}/api/health)

          if [ "$RESPONSE" = "200" ]; then
            echo "‚úÖ Health check passed! Application is running correctly."
          else
            echo "‚ùå Health check failed! HTTP status: $RESPONSE"
            exit 1
          fi
