name: Deploy to Cloudflare Workers

on:
  push:
    branches: [main]
  workflow_dispatch: # 手動実行も可能

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.repository == 'keichan110/snow-school-scheduler' # 意図しないforkでの実行防止

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Validate Prisma schema
        run: npx prisma validate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Build application with OpenNext Cloudflare
        run: npx @opennextjs/cloudflare build
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          LINE_CHANNEL_ID: ${{ vars.LINE_CHANNEL_ID }}
          LINE_CHANNEL_SECRET: ${{ secrets.LINE_CHANNEL_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}

      - name: Configure Cloudflare Workers runtime environment
        run: |
          npx wrangler secret put JWT_SECRET <<< "$JWT_SECRET"
          npx wrangler secret put LINE_CHANNEL_ID <<< "$LINE_CHANNEL_ID"
          npx wrangler secret put LINE_CHANNEL_SECRET <<< "$LINE_CHANNEL_SECRET"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          LINE_CHANNEL_ID: ${{ vars.LINE_CHANNEL_ID }}
          LINE_CHANNEL_SECRET: ${{ secrets.LINE_CHANNEL_SECRET }}

      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy

      - name: Prepare D1 migrations
        run: |
          mkdir -p migrations
          if [ -d "prisma/migrations" ]; then
            find prisma/migrations -name "migration.sql" -exec cp {} migrations/ \;
            echo "Copied Prisma migrations to D1 migrations directory"
          else
            echo "No Prisma migrations found"
          fi

      - name: Apply D1 database migrations
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: d1 migrations apply snow-school-scheduler --env=production

      - name: Notify deployment status
        if: failure()
        run: |
          echo "Deployment failed! Check the logs above for details."
          exit 1

  health-check:
    runs-on: ubuntu-latest
    needs: deploy
    if: success()

    steps:
      - name: Health check
        env:
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        run: |
          echo "Waiting for deployment to be available..."
          sleep 30

          # ヘルスチェックAPI呼び出し
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" ${NEXTAUTH_URL}/api/health)

          if [ "$RESPONSE" = "200" ]; then
            echo "✅ Health check passed! Application is running correctly."
          else
            echo "❌ Health check failed! HTTP status: $RESPONSE"
            exit 1
          fi
