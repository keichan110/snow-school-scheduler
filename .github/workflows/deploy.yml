name: Deploy to Cloudflare Workers

on:
  push:
    branches: [main]
  workflow_dispatch: # 手動実行も可能

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.repository == 'keichan110/snow-school-scheduler' # 意図しないforkでの実行防止
    outputs:
      nextauth_url: ${{ steps.load_nextauth_url.outputs.nextauth_url }}
    env:
      PRISMA_DUMMY_DATABASE_URL: file:./tmp/prisma-deploy.db # D1本番とは無関係なCI専用ダミー

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate
        env:
          DATABASE_URL: ${{ env.PRISMA_DUMMY_DATABASE_URL }}

      - name: Validate Prisma schema
        run: npx prisma validate
        env:
          DATABASE_URL: ${{ env.PRISMA_DUMMY_DATABASE_URL }}

      - name: Load NEXTAUTH_URL from wrangler.toml
        id: load_nextauth_url
        run: |
          value=$(node scripts/get-wrangler-config.js 'vars.NEXTAUTH_URL')
          echo "NEXTAUTH_URL=$value" >> "$GITHUB_ENV"
          echo "nextauth_url=$value" >> "$GITHUB_OUTPUT"

      - name: Load D1_DATABASE_ID from wrangler.toml
        id: load_d1_database_id
        run: |
          value=$(node scripts/get-wrangler-config.js 'd1_databases.0.database_id')
          echo "D1_DATABASE_ID=$value" >> "$GITHUB_ENV"

      - name: Build application with OpenNext Cloudflare
        run: npx @opennextjs/cloudflare build
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ env.PRISMA_DUMMY_DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          LINE_CHANNEL_ID: ${{ vars.LINE_CHANNEL_ID }}
          LINE_CHANNEL_SECRET: ${{ secrets.LINE_CHANNEL_SECRET }}
          NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}

      - name: Configure Cloudflare Workers runtime environment
        run: |
          npx wrangler secret put JWT_SECRET <<< "$JWT_SECRET"
          npx wrangler secret put LINE_CHANNEL_ID <<< "$LINE_CHANNEL_ID"
          npx wrangler secret put LINE_CHANNEL_SECRET <<< "$LINE_CHANNEL_SECRET"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          LINE_CHANNEL_ID: ${{ vars.LINE_CHANNEL_ID }}
          LINE_CHANNEL_SECRET: ${{ secrets.LINE_CHANNEL_SECRET }}

      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy

      - name: Apply database migrations
        id: migrate
        run: npx prisma migrate deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          DATABASE_URL: 'wrangler://api.cloudflare.com/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/d1/databases/${{ env.D1_DATABASE_ID }}'

      - name: Notify deployment status
        if: failure()
        run: |
          echo "Deployment failed! Check the logs above for details."
          exit 1

  health-check:
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    env:
      NEXTAUTH_URL: ${{ needs.deploy.outputs.nextauth_url }}

    steps:
      - name: Health check
        run: |
          echo "Waiting for deployment to be available..."
          sleep 30

          # ヘルスチェックAPI呼び出し
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" ${NEXTAUTH_URL}/api/health)

          if [ "$RESPONSE" = "200" ]; then
            echo "✅ Health check passed! Application is running correctly."
          else
            echo "❌ Health check failed! HTTP status: $RESPONSE"
            exit 1
          fi
