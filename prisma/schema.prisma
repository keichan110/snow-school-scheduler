generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// 部門テーブル（スキー・スノーボード等の部門を管理）
model Department {
  id             Int             @id @default(autoincrement())
  code           String          @unique
  name           String
  description    String?
  isActive       Boolean         @default(true) @map("is_active")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  certifications Certification[]
  shifts         Shift[]

  @@index([isActive], map: "idx_departments_active")
  @@map("departments")
}

/// 資格テーブル（インストラクター資格を管理）
model Certification {
  id                       Int                       @id @default(autoincrement())
  departmentId             Int                       @map("department_id")
  name                     String
  shortName                String                    @map("short_name")
  organization             String
  description              String?
  isActive                 Boolean                   @default(true) @map("is_active")
  createdAt                DateTime                  @default(now()) @map("created_at")
  updatedAt                DateTime                  @updatedAt @map("updated_at")
  department               Department                @relation(fields: [departmentId], references: [id])
  instructorCertifications InstructorCertification[]

  @@index([departmentId], map: "idx_certifications_department_id")
  @@index([isActive], map: "idx_certifications_active")
  @@index([organization], map: "idx_certifications_organization")
  @@map("certifications")
}

/// インストラクターテーブル（インストラクター基本情報を管理）
model Instructor {
  id               Int                       @id @default(autoincrement())
  lastName         String                    @map("last_name")
  firstName        String                    @map("first_name")
  lastNameKana     String?                   @map("last_name_kana")
  firstNameKana    String?                   @map("first_name_kana")
  status           String                    @default("ACTIVE")
  notes            String?
  createdAt        DateTime                  @default(now()) @map("created_at")
  updatedAt        DateTime                  @updatedAt @map("updated_at")
  certifications   InstructorCertification[]
  shiftAssignments ShiftAssignment[]

  @@index([status], map: "idx_instructors_status")
  @@index([lastName, firstName], map: "idx_instructors_name")
  @@index([lastNameKana, firstNameKana], map: "idx_instructors_kana")
  @@index([status, lastName, firstName], map: "idx_instructors_status_name")
  @@index([status, lastNameKana, firstNameKana], map: "idx_instructors_status_kana")
  @@index([lastName, firstName], map: "idx_instructors_active_name")
  @@map("instructors")
}

/// インストラクター資格関連テーブル（多対多の中間テーブル）
model InstructorCertification {
  id              Int           @id @default(autoincrement())
  instructorId    Int           @map("instructor_id")
  certificationId Int           @map("certification_id")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  certification   Certification @relation(fields: [certificationId], references: [id], onDelete: Cascade)
  instructor      Instructor    @relation(fields: [instructorId], references: [id], onDelete: Cascade)

  @@unique([instructorId, certificationId], map: "idx_instructor_cert_unique")
  @@index([instructorId], map: "idx_instructor_cert_instructor_id")
  @@index([certificationId], map: "idx_instructor_cert_certification_id")
  @@map("instructor_certifications")
}

/// シフト種類テーブル（シフトの種類を管理するマスタ）
model ShiftType {
  id        Int      @id @default(autoincrement())
  name      String
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  shifts    Shift[]

  @@index([isActive], map: "idx_shift_types_active")
  @@map("shift_types")
}

/// シフトテーブル（シフト枠を管理）
model Shift {
  id               Int               @id @default(autoincrement())
  date             DateTime
  departmentId     Int               @map("department_id")
  shiftTypeId      Int               @map("shift_type_id")
  description      String?
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  shiftAssignments ShiftAssignment[]
  shiftType        ShiftType         @relation(fields: [shiftTypeId], references: [id])
  department       Department        @relation(fields: [departmentId], references: [id])

  @@unique([date, departmentId, shiftTypeId], name: "unique_shift_per_day")
  @@index([departmentId], map: "idx_shifts_department_id")
  @@index([shiftTypeId], map: "idx_shifts_shift_type_id")
  @@index([date], map: "idx_shifts_date")
  @@index([date, departmentId], map: "idx_shifts_date_department")
  @@index([departmentId, shiftTypeId, date], map: "idx_shifts_department_type_date")
  @@index([date, shiftTypeId], map: "idx_shifts_date_type")
  @@index([date, departmentId, shiftTypeId], map: "idx_shifts_covering")
  @@map("shifts")
}

/// シフト割り当てテーブル（シフトとインストラクターの多対多関係を管理）
model ShiftAssignment {
  id           Int        @id @default(autoincrement())
  shiftId      Int        @map("shift_id")
  instructorId Int        @map("instructor_id")
  assignedAt   DateTime   @default(now()) @map("assigned_at")
  instructor   Instructor @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  shift        Shift      @relation(fields: [shiftId], references: [id], onDelete: Cascade)

  @@unique([shiftId, instructorId], map: "idx_shift_assignment_unique")
  @@index([shiftId], map: "idx_shift_assignments_shift_id")
  @@index([instructorId], map: "idx_shift_assignments_instructor_id")
  @@index([assignedAt], map: "idx_shift_assignments_assigned_at")
  @@index([instructorId, assignedAt], map: "idx_assignments_instructor_date")
  @@index([assignedAt, instructorId], map: "idx_assignments_date_instructor")
  @@index([shiftId, instructorId], map: "idx_assignments_shift_covering")
  @@map("shift_assignments")
}

/// ユーザー認証・権限管理テーブル
model User {
  id                 String            @id @default(cuid())
  lineUserId         String            @unique @map("line_user_id")
  displayName        String            @map("display_name")
  role               String            @default("MEMBER")
  isActive           Boolean           @default(true) @map("is_active")
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  createdInvitations InvitationToken[] @relation("CreatedBy")

  @@index([lineUserId], map: "idx_users_line_user_id")
  @@index([role], map: "idx_users_role")
  @@index([isActive], map: "idx_users_active")
  @@index([role, isActive], map: "idx_users_role_active")
  @@map("users")
}

/// 招待URL管理テーブル
model InvitationToken {
  token       String   @id
  expiresAt   DateTime @map("expires_at")
  isActive    Boolean  @default(true) @map("is_active")
  createdBy   String   @map("created_by")
  maxUses     Int?     @map("max_uses")
  usedCount   Int      @default(0) @map("used_count")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  description String?
  creator     User     @relation("CreatedBy", fields: [createdBy], references: [id])

  @@index([expiresAt], map: "idx_invitation_tokens_expires_at")
  @@index([isActive], map: "idx_invitation_tokens_active")
  @@index([createdBy], map: "idx_invitation_tokens_created_by")
  @@index([isActive, expiresAt], map: "idx_invitation_tokens_active_expires")
  @@map("invitation_tokens")
}
