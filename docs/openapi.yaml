openapi: 3.0.3
info:
  title: Snow School Scheduler API
  description: スキー・スノーボードスクールのシフト管理システム API。
  version: 1.1.0
  contact:
    name: Snow School Scheduler

servers:
  - url: http://localhost:3000
    description: 開発環境
  - url: https://snow-school-scheduler-api.example.com
    description: 本番環境

tags:
  - name: システム
    description: サービスの稼働監視と内部診断
  - name: 部門管理
    description: 部門マスタ参照 API
  - name: 資格管理
    description: 資格マスタ参照 API
  - name: インストラクター管理
    description: インストラクター参照 API
  - name: シフト管理
    description: シフト枠・割り当て参照 API
  - name: 認証
    description: セッションおよび LINE 認証関連 API
  - name: ユーザー管理
    description: 管理者向けユーザー参照 API
  - name: 招待管理
    description: 招待トークン参照 API

paths:
  /api/health:
    get:
      summary: ヘルスチェック
      description: サーバーの稼働状況を返します。
      tags:
        - システム
      responses:
        '200':
          description: サーバー稼働中
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /api/departments:
    get:
      summary: 部門一覧取得
      description: 認証済みユーザーが登録済み部門を取得します。
      tags:
        - 部門管理
      security:
        - bearerAuth: []
        - sessionCookie: []
      responses:
        '200':
          description: 部門一覧
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/departments/{id}:
    parameters:
      - $ref: '#/components/parameters/Id'
    get:
      summary: 部門詳細取得
      description: ID で指定された部門の詳細を返します。
      tags:
        - 部門管理
      security:
        - bearerAuth: []
        - sessionCookie: []
      responses:
        '200':
          description: 部門詳細
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/certifications:
    get:
      summary: 資格一覧取得
      description: 認証済みユーザーが登録済み資格マスタを取得します。
      tags:
        - 資格管理
      security:
        - bearerAuth: []
        - sessionCookie: []
      responses:
        '200':
          description: 資格一覧
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificationListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/certifications/{id}:
    parameters:
      - $ref: '#/components/parameters/Id'
    get:
      summary: 資格詳細取得
      description: ID で指定された資格の詳細を返します。
      tags:
        - 資格管理
      security:
        - bearerAuth: []
        - sessionCookie: []
      responses:
        '200':
          description: 資格詳細
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificationDetailResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/shift-types:
    get:
      summary: シフト種類一覧取得
      description: 認証済みユーザーがシフト種類マスタを取得します。
      tags:
        - シフト管理
      security:
        - bearerAuth: []
        - sessionCookie: []
      responses:
        '200':
          description: シフト種類一覧
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShiftTypeListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/shift-types/{id}:
    parameters:
      - $ref: '#/components/parameters/Id'
    get:
      summary: シフト種類詳細取得
      description: ID で指定されたシフト種類を返します。
      tags:
        - シフト管理
      security:
        - bearerAuth: []
        - sessionCookie: []
      responses:
        '200':
          description: シフト種類詳細
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShiftType'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/instructors:
    get:
      summary: インストラクター一覧取得
      description: ステータスや部門で絞り込んだインストラクター一覧を取得します。
      tags:
        - インストラクター管理
      security:
        - bearerAuth: []
        - sessionCookie: []
      parameters:
        - name: status
          in: query
          description: ステータスでフィルタリングします。
          schema:
            type: string
            enum: [ACTIVE, INACTIVE, RETIRED]
        - name: departmentId
          in: query
          description: 指定した部門の資格を持つインストラクターに絞り込みます。
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: インストラクター一覧
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstructorListResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/instructors/{id}:
    parameters:
      - $ref: '#/components/parameters/Id'
    get:
      summary: インストラクター詳細取得
      description: ID で指定したインストラクターの詳細を返します。
      tags:
        - インストラクター管理
      security:
        - bearerAuth: []
        - sessionCookie: []
      responses:
        '200':
          description: インストラクター詳細
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstructorDetailResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/shifts:
    get:
      summary: シフト一覧取得
      description: 部門・シフト種類・期間でフィルタしたシフト枠を取得します。
      tags:
        - シフト管理
      security:
        - bearerAuth: []
        - sessionCookie: []
      parameters:
        - name: departmentId
          in: query
          description: 部門 ID でフィルタリングします。
          schema:
            type: integer
            minimum: 1
        - name: shiftTypeId
          in: query
          description: シフト種類 ID でフィルタリングします。
          schema:
            type: integer
            minimum: 1
        - name: dateFrom
          in: query
          description: 取得期間の開始日 (YYYY-MM-DD)。
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          description: 取得期間の終了日 (YYYY-MM-DD)。
          schema:
            type: string
            format: date
      responses:
        '200':
          description: シフト一覧
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShiftListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/shifts/{id}:
    parameters:
      - $ref: '#/components/parameters/Id'
    get:
      summary: シフト詳細取得
      description: ID で指定されたシフト枠の詳細と割り当てを返します。
      tags:
        - シフト管理
      security:
        - bearerAuth: []
        - sessionCookie: []
      responses:
        '200':
          description: シフト詳細
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShiftDetailResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/shifts/prepare:
    get:
      summary: シフト新規作成・編集準備
      description: 指定した日付・部門・シフト種類の組み合わせに既存シフトがあるか判定し、フォーム初期値を返します。
      tags:
        - シフト管理
      security:
        - bearerAuth: []
        - sessionCookie: []
      parameters:
        - name: date
          in: query
          required: true
          description: シフト日付 (YYYY-MM-DD)。
          schema:
            type: string
            format: date
        - name: departmentId
          in: query
          required: true
          description: 部門 ID。
          schema:
            type: integer
            minimum: 1
        - name: shiftTypeId
          in: query
          required: true
          description: シフト種類 ID。
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: フォーム初期化結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrepareShiftResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/me:
    get:
      summary: ログインユーザー情報取得
      description: 認証済みユーザーのプロフィールを返します。
      tags:
        - 認証
      security:
        - bearerAuth: []
        - sessionCookie: []
      responses:
        '200':
          description: ユーザー情報取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthMeSuccessResponse'
        '401':
          $ref: '#/components/responses/AuthError'
        '403':
          $ref: '#/components/responses/AuthError'
        '500':
          $ref: '#/components/responses/AuthError'
    post:
      summary: 表示名更新
      description: ログインユーザーの表示名を更新します。
      tags:
        - 認証
      security:
        - bearerAuth: []
        - sessionCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDisplayNameRequest'
      responses:
        '200':
          description: 表示名更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthMeSuccessResponse'
        '400':
          $ref: '#/components/responses/AuthError'
        '401':
          $ref: '#/components/responses/AuthError'
        '403':
          $ref: '#/components/responses/AuthError'
        '500':
          $ref: '#/components/responses/AuthError'

  /api/auth/logout:
    get:
      summary: ログアウト (リダイレクト)
      description: 認証 Cookie を削除し、指定または既定の URL へリダイレクトします。
      tags:
        - 認証
      responses:
        '302':
          description: リダイレクトでのログアウト完了
          headers:
            Location:
              description: リダイレクト先 URL
              schema:
                type: string
                format: uri
    post:
      summary: ログアウト (JSON 応答)
      description: Cookie を削除し JSON でログアウト結果を返します。
      tags:
        - 認証
      security:
        - bearerAuth: []
        - sessionCookie: []
      responses:
        '200':
          description: ログアウト処理完了
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
    delete:
      summary: ログアウト (DELETE メソッド)
      description: RESTful DELETE でログアウト処理を行います。
      tags:
        - 認証
      security:
        - bearerAuth: []
        - sessionCookie: []
      responses:
        '200':
          description: ログアウト処理完了
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'

  /api/auth/line/login:
    get:
      summary: LINE 認証開始 (GET)
      description: 招待トークンや自動ログイン設定をクエリで受け取り、LINE 認証ページへリダイレクトします。
      tags:
        - 認証
      parameters:
        - name: invite
          in: query
          description: 招待トークン
          schema:
            type: string
        - name: redirect
          in: query
          description: 認証後に戻るアプリ内パス
          schema:
            type: string
        - name: disable_auto_login
          in: query
          description: true の場合、自動ログインを無効化します。
          schema:
            type: string
            enum: ['true', 'false']
      responses:
        '302':
          description: LINE 認証ページへリダイレクト
          headers:
            Location:
              description: LINE 認証 URL
              schema:
                type: string
                format: uri
        '500':
          $ref: '#/components/responses/LineAuthError'
    post:
      summary: LINE 認証開始 (POST)
      description: JSON ボディから招待トークン等を受け取り、LINE 認証ページへリダイレクトします。
      tags:
        - 認証
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LineLoginRequest'
      responses:
        '302':
          description: LINE 認証ページへリダイレクト
          headers:
            Location:
              description: LINE 認証 URL
              schema:
                type: string
                format: uri
        '400':
          $ref: '#/components/responses/LineAuthError'
        '500':
          $ref: '#/components/responses/LineAuthError'

  /api/auth/line/callback:
    get:
      summary: LINE 認証コールバック
      description: LINE から返却されたコードを検証し、アプリ内にリダイレクトします。
      tags:
        - 認証
      parameters:
        - name: code
          in: query
          required: false
          description: LINE 認証コード
          schema:
            type: string
        - name: state
          in: query
          required: false
          description: CSRF 防止用 state 値
          schema:
            type: string
        - name: error
          in: query
          required: false
          description: ユーザーキャンセル等のエラーコード
          schema:
            type: string
        - name: error_description
          in: query
          required: false
          description: エラー詳細
          schema:
            type: string
      responses:
        '302':
          description: 認証後にアプリへリダイレクト
          headers:
            Location:
              description: アプリ側の戻り先 URL
              schema:
                type: string
                format: uri
        '400':
          $ref: '#/components/responses/LineCallbackError'
        '401':
          $ref: '#/components/responses/LineCallbackError'
        '500':
          $ref: '#/components/responses/LineCallbackError'

  /api/auth/users:
    get:
      summary: ユーザー一覧取得
      description: 管理者・マネージャーがユーザー一覧をページング付きで取得します。
      tags:
        - ユーザー管理
      security:
        - bearerAuth: []
        - sessionCookie: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
          description: 取得ページ (デフォルト 1)
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: 1 ページあたりの件数 (デフォルト 20)
        - name: role
          in: query
          schema:
            type: string
            enum: [ADMIN, MANAGER, MEMBER]
          description: 権限でのフィルタ
        - name: isActive
          in: query
          schema:
            type: string
            enum: ['true', 'false']
          description: アクティブ状態でのフィルタ
        - name: search
          in: query
          schema:
            type: string
          description: 表示名による部分一致検索
      responses:
        '200':
          description: ユーザー一覧
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: ユーザー ID (cuid)
        schema:
          type: string
    get:
      summary: ユーザー詳細取得
      description: 管理者・マネージャー、または本人がユーザー詳細を取得します。
      tags:
        - ユーザー管理
      security:
        - bearerAuth: []
        - sessionCookie: []
      responses:
        '200':
          description: ユーザー詳細
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/invitations:
    get:
      summary: 招待トークン一覧取得
      description: 管理者・マネージャーが作成済み招待トークン一覧を取得します。
      tags:
        - 招待管理
      security:
        - bearerAuth: []
        - sessionCookie: []
      parameters:
        - name: includeInactive
          in: query
          description: true の場合、無効化済みトークンも含みます。
          schema:
            type: string
            enum: ['true', 'false']
        - name: showAll
          in: query
          description: 管理者が true を指定すると全ユーザー分を取得します。
          schema:
            type: string
            enum: ['true', 'false']
      responses:
        '200':
          description: 招待トークン一覧
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/invitations/active:
    get:
      summary: 最新の有効招待取得
      description: 現在有効な最新の招待トークン情報を返します。
      tags:
        - 招待管理
      security:
        - bearerAuth: []
        - sessionCookie: []
      responses:
        '200':
          description: 有効招待情報
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActiveInvitationResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/invitations/{token}/verify:
    parameters:
      - $ref: '#/components/parameters/Token'
    get:
      summary: 招待トークン検証
      description: 招待トークンの有効性を認証なしで検証します。
      tags:
        - 招待管理
      responses:
        '200':
          description: 招待トークンが有効
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationValidationSuccess'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '410':
          $ref: '#/components/responses/Gone'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  parameters:
    Id:
      name: id
      in: path
      required: true
      description: 数値 ID
      schema:
        type: integer
        minimum: 1
    Token:
      name: token
      in: path
      required: true
      description: 招待トークン文字列
      schema:
        type: string

  responses:
    NotFound:
      description: リソースが見つかりません
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorEnvelope'
          example:
            success: false
            data: null
            message: null
            error: Resource not found
    ValidationError:
      description: バリデーションエラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorEnvelope'
          example:
            success: false
            data: null
            message: null
            error: 'Validation failed: status must be one of ACTIVE, INACTIVE, RETIRED'
    BadRequest:
      description: 不正なリクエストです
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorEnvelope'
          example:
            success: false
            data: null
            message: null
            error: Invalid ID format
    Unauthorized:
      description: 認証が必要です
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorEnvelope'
          example:
            success: false
            data: null
            message: null
            error: Authentication required
    Forbidden:
      description: 権限が不足しています
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorEnvelope'
          example:
            success: false
            data: null
            message: null
            error: Insufficient permissions. Admin or Manager role required.
    ServerError:
      description: サーバー内部エラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorEnvelope'
          example:
            success: false
            data: null
            message: null
            error: Internal server error
    Gone:
      description: リソースは存在したが現在は利用できません
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorEnvelope'
          example:
            success: false
            data: null
            message: null
            error: Expired invitation token
    AuthError:
      description: 認証関連エラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthErrorResponse'
          example:
            success: false
            error: Authentication failed
            statusCode: 401
    LineAuthError:
      description: LINE 認証の開始に失敗しました
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LineAuthErrorResponse'
          example:
            success: false
            error: Authentication service is not properly configured
            details:
              - Missing LINE_CLIENT_ID
    LineCallbackError:
      description: LINE コールバック処理でエラーが発生しました
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LineCallbackErrorResponse'
          example:
            success: false
            error: Invalid callback parameters

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    sessionCookie:
      type: apiKey
      in: cookie
      name: auth-token

  schemas:
    HealthStatus:
      type: object
      properties:
        status:
          type: string
          example: ok

    ApiErrorEnvelope:
      type: object
      required:
        - success
        - data
        - message
        - error
      properties:
        success:
          type: boolean
          enum: [false]
        data:
          nullable: true
          example: null
        message:
          type: string
          nullable: true
          example: null
        error:
          type: string
          example: Internal server error

    ApiSuccessEnvelope:
      type: object
      required:
        - success
        - data
        - message
        - error
      properties:
        success:
          type: boolean
          enum: [true]
        data:
          nullable: true
        message:
          type: string
          nullable: true
          example: null
        error:
          type: string
          nullable: true
          example: null

    ApiListEnvelope:
      allOf:
        - $ref: '#/components/schemas/ApiSuccessEnvelope'
        - type: object
          properties:
            count:
              type: integer
              minimum: 0
              example: 1

    Department:
      type: object
      properties:
        id:
          type: integer
          example: 1
        code:
          type: string
          example: SKI
        name:
          type: string
          example: スキー
        description:
          type: string
          nullable: true
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    DepartmentListResponse:
      allOf:
        - $ref: '#/components/schemas/ApiListEnvelope'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Department'

    DepartmentResponse:
      allOf:
        - $ref: '#/components/schemas/ApiSuccessEnvelope'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Department'

    DepartmentSummary:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    Certification:
      type: object
      properties:
        id:
          type: integer
        departmentId:
          type: integer
        name:
          type: string
          example: スキー指導員
        shortName:
          type: string
          example: 指導員
        organization:
          type: string
          example: SAJ
        description:
          type: string
          nullable: true
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        department:
          $ref: '#/components/schemas/DepartmentSummary'

    CertificationListResponse:
      allOf:
        - $ref: '#/components/schemas/ApiListEnvelope'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Certification'

    InstructorSummary:
      type: object
      properties:
        id:
          type: integer
        lastName:
          type: string
        firstName:
          type: string
        status:
          type: string
          enum: [ACTIVE, INACTIVE, RETIRED]

    CertificationDetail:
      allOf:
        - $ref: '#/components/schemas/Certification'
        - type: object
          properties:
            instructors:
              type: array
              items:
                $ref: '#/components/schemas/InstructorSummary'

    CertificationDetailResponse:
      allOf:
        - $ref: '#/components/schemas/ApiSuccessEnvelope'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/CertificationDetail'

    CertificationSummary:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        shortName:
          type: string
        organization:
          type: string
        department:
          $ref: '#/components/schemas/DepartmentSummary'

    Instructor:
      type: object
      properties:
        id:
          type: integer
        lastName:
          type: string
        firstName:
          type: string
        lastNameKana:
          type: string
          nullable: true
        firstNameKana:
          type: string
          nullable: true
        status:
          type: string
          enum: [ACTIVE, INACTIVE, RETIRED]
        notes:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        certifications:
          type: array
          items:
            $ref: '#/components/schemas/CertificationSummary'

    InstructorListResponse:
      allOf:
        - $ref: '#/components/schemas/ApiListEnvelope'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Instructor'

    InstructorDetailResponse:
      allOf:
        - $ref: '#/components/schemas/ApiSuccessEnvelope'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Instructor'
            message:
              type: string
              nullable: true
              example: Instructor operation completed successfully

    ShiftType:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ShiftTypeListResponse:
      allOf:
        - $ref: '#/components/schemas/ApiListEnvelope'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ShiftType'

    InstructorAssignment:
      type: object
      properties:
        id:
          type: integer
        shiftId:
          type: integer
        instructorId:
          type: integer
        assignedAt:
          type: string
          format: date-time
        instructor:
          type: object
          properties:
            id:
              type: integer
            lastName:
              type: string
            firstName:
              type: string
            status:
              type: string
              enum: [ACTIVE, INACTIVE, RETIRED]

    ShiftWithStats:
      type: object
      properties:
        id:
          type: integer
        date:
          type: string
          format: date
        departmentId:
          type: integer
        shiftTypeId:
          type: integer
        description:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        department:
          $ref: '#/components/schemas/Department'
        shiftType:
          $ref: '#/components/schemas/ShiftType'
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/InstructorAssignment'
        assignedCount:
          type: integer

    ShiftListResponse:
      allOf:
        - $ref: '#/components/schemas/ApiListEnvelope'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ShiftWithStats'

    ShiftDetailResponse:
      allOf:
        - $ref: '#/components/schemas/ApiSuccessEnvelope'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/ShiftWithStats'
            message:
              type: string
              nullable: true
              example: Shift operation completed successfully

    PrepareShiftExisting:
      type: object
      properties:
        id:
          type: integer
        date:
          type: string
          format: date
        departmentId:
          type: integer
        shiftTypeId:
          type: integer
        description:
          type: string
          nullable: true
        department:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            code:
              type: string
        shiftType:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
        assignments:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              instructor:
                type: object
                properties:
                  id:
                    type: integer
                  lastName:
                    type: string
                  firstName:
                    type: string
        assignedCount:
          type: integer

    PrepareShiftFormData:
      type: object
      properties:
        date:
          type: string
          format: date
        departmentId:
          type: integer
        shiftTypeId:
          type: integer
        description:
          type: string
          nullable: true
        selectedInstructorIds:
          type: array
          items:
            type: integer

    PrepareShiftData:
      type: object
      properties:
        mode:
          type: string
          enum: [create, edit]
        shift:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/PrepareShiftExisting'
        formData:
          $ref: '#/components/schemas/PrepareShiftFormData'

    PrepareShiftSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          enum: [true]
        data:
          $ref: '#/components/schemas/PrepareShiftData'

    PrepareShiftErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          enum: [false]
        error:
          type: string

    PrepareShiftResponse:
      oneOf:
        - $ref: '#/components/schemas/PrepareShiftSuccessResponse'
        - $ref: '#/components/schemas/PrepareShiftErrorResponse'

    AuthenticatedUser:
      type: object
      properties:
        id:
          type: string
        lineUserId:
          type: string
        displayName:
          type: string
        pictureUrl:
          type: string
          nullable: true
          format: uri
        role:
          type: string
          enum: [ADMIN, MANAGER, MEMBER]
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    AuthMeSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          enum: [true]
        user:
          $ref: '#/components/schemas/AuthenticatedUser'

    AuthErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          enum: [false]
        error:
          type: string
        statusCode:
          type: integer
          nullable: true

    UpdateDisplayNameRequest:
      type: object
      required:
        - displayName
      properties:
        displayName:
          type: string
          minLength: 1
          maxLength: 50
          example: 山田太郎

    LogoutResponse:
      type: object
      properties:
        success:
          type: boolean
          enum: [true]
        message:
          type: string
          example: Logged out successfully
        warning:
          type: string
          nullable: true

    LineLoginRequest:
      type: object
      properties:
        inviteToken:
          type: string
          description: 招待経由時に使用されるトークン
        disableAutoLogin:
          type: boolean
          description: true の場合、自動ログインを無効化

    LineAuthErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          enum: [false]
        error:
          type: string
        details:
          type: array
          items:
            type: string
        message:
          type: string
          nullable: true

    LineCallbackErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          enum: [false]
        error:
          type: string
        message:
          type: string
          nullable: true

    UserSummary:
      type: object
      properties:
        id:
          type: string
        displayName:
          type: string
        role:
          type: string
          enum: [ADMIN, MANAGER, MEMBER]
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UserListData:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserSummary'
        total:
          type: integer
        page:
          type: integer
        limit:
          type: integer

    UserListResponse:
      type: object
      properties:
        success:
          type: boolean
          enum: [true]
        data:
          $ref: '#/components/schemas/UserListData'

    UserDetail:
      allOf:
        - $ref: '#/components/schemas/UserSummary'
        - type: object
          properties:
            invitationCount:
              type: integer

    UserDetailResponse:
      type: object
      properties:
        success:
          type: boolean
          enum: [true]
        data:
          $ref: '#/components/schemas/UserDetail'

    InvitationListItem:
      type: object
      properties:
        token:
          type: string
        description:
          type: string
        expiresAt:
          type: string
          format: date-time
        isActive:
          type: boolean
        maxUses:
          type: integer
          nullable: true
        usedCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        creatorName:
          type: string
        creatorRole:
          type: string
          enum: [ADMIN, MANAGER, MEMBER]
        isExpired:
          type: boolean
        remainingUses:
          type: integer
          nullable: true

    InvitationListResponse:
      type: object
      properties:
        success:
          type: boolean
          enum: [true]
        data:
          type: array
          items:
            $ref: '#/components/schemas/InvitationListItem'

    ActiveInvitationData:
      type: object
      properties:
        token:
          type: string
        description:
          type: string
        expiresAt:
          type: string
          format: date-time
        isActive:
          type: boolean
        maxUses:
          type: integer
          nullable: true
        usageCount:
          type: integer
        remainingUses:
          type: integer
          nullable: true
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
          description: 招待作成者の表示名

    ActiveInvitationResponse:
      type: object
      properties:
        success:
          type: boolean
          enum: [true]
        data:
          $ref: '#/components/schemas/ActiveInvitationData'

    InvitationValidationSuccess:
      type: object
      properties:
        success:
          type: boolean
          enum: [true]
        data:
          type: object
          properties:
            isValid:
              type: boolean
              enum: [true]

