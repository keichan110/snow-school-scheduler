openapi: 3.0.3
info:
  title: Snow School Scheduler API
  description: スキー・スノーボードスクールのシフト管理システム API
  version: 1.0.0
  contact:
    name: Snow School Scheduler

servers:
  - url: http://localhost:3000
    description: 開発環境
  - url: https://snow-school-scheduler-api.example.com
    description: 本番環境

paths:
  /api/health:
    get:
      summary: ヘルスチェック
      description: サーバーの稼働状況を確認
      tags:
        - システム
      responses:
        '200':
          description: サーバー稼働中
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'ok'

  /api/departments:
    get:
      summary: 部門一覧取得
      description: 全部門の一覧を取得
      tags:
        - 部門管理
      responses:
        '200':
          description: 部門一覧
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Department'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/departments/[id]:
    parameters:
      - $ref: '#/components/parameters/Id'

    get:
      summary: 部門詳細取得
      description: 指定された部門の詳細情報を取得
      tags:
        - 部門管理
      responses:
        '200':
          description: 部門詳細
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Department'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/certifications:
    get:
      summary: 資格一覧取得
      description: 全資格の一覧を取得
      tags:
        - 資格管理
      responses:
        '200':
          description: 資格一覧
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Certification'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: 資格作成
      description: 新しい資格を作成
      tags:
        - 資格管理
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificationInput'
      responses:
        '201':
          description: 資格作成成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Certification'
                      message:
                        type: string
                        example: 'Certification created successfully'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/certifications/[id]:
    parameters:
      - $ref: '#/components/parameters/Id'

    get:
      summary: 資格詳細取得
      description: 指定された資格の詳細情報を取得
      tags:
        - 資格管理
      responses:
        '200':
          description: 資格詳細
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CertificationDetail'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      summary: 資格更新
      description: 指定された資格を更新
      tags:
        - 資格管理
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificationInput'
      responses:
        '200':
          description: 資格更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Certification'
                      message:
                        type: string
                        example: 'Certification updated successfully'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/instructors:
    get:
      summary: インストラクター一覧取得
      description: インストラクターの一覧を取得（ステータス・部門絞り込み可能）
      tags:
        - インストラクター管理
      parameters:
        - name: status
          in: query
          description: ステータスでフィルタリング
          schema:
            type: string
            enum: [ACTIVE, INACTIVE, RETIRED]
        - name: departmentId
          in: query
          description: 部門IDでフィルタリング（指定された部門の資格を持つインストラクターのみ）
          schema:
            type: integer
            minimum: 1
            example: 1
      responses:
        '200':
          description: インストラクター一覧
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/Instructor'
                            - type: object
                              properties:
                                certifications:
                                  type: array
                                  items:
                                    $ref: '#/components/schemas/CertificationSummary'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: インストラクター作成
      description: 新しいインストラクターを作成
      tags:
        - インストラクター管理
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstructorInput'
      responses:
        '201':
          description: インストラクター作成成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Instructor'
                          - type: object
                            properties:
                              certifications:
                                type: array
                                items:
                                  $ref: '#/components/schemas/CertificationSummary'
                      message:
                        type: string
                        example: 'Instructor operation completed successfully'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/instructors/[id]:
    parameters:
      - $ref: '#/components/parameters/Id'

    get:
      summary: インストラクター詳細取得
      description: 指定されたインストラクターの詳細情報を取得
      tags:
        - インストラクター管理
      responses:
        '200':
          description: インストラクター詳細
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Instructor'
                          - type: object
                            properties:
                              certifications:
                                type: array
                                items:
                                  $ref: '#/components/schemas/CertificationSummary'
                      message:
                        type: string
                        example: 'Instructor operation completed successfully'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      summary: インストラクター更新
      description: 指定されたインストラクターを更新
      tags:
        - インストラクター管理
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstructorInput'
      responses:
        '200':
          description: インストラクター更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Instructor'
                          - type: object
                            properties:
                              certifications:
                                type: array
                                items:
                                  $ref: '#/components/schemas/CertificationSummary'
                      message:
                        type: string
                        example: 'Instructor operation completed successfully'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/shift-types:
    get:
      summary: シフト種類一覧取得
      description: 全シフト種類の一覧を取得
      tags:
        - シフト種類管理
      responses:
        '200':
          description: シフト種類一覧
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ShiftType'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: シフト種類作成
      description: 新しいシフト種類を作成
      tags:
        - シフト種類管理
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShiftTypeInput'
      responses:
        '201':
          description: シフト種類作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShiftType'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/shift-types/[id]:
    parameters:
      - $ref: '#/components/parameters/Id'

    get:
      summary: シフト種類詳細取得
      description: 指定されたシフト種類の詳細情報を取得
      tags:
        - シフト種類管理
      responses:
        '200':
          description: シフト種類詳細
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShiftTypeDetail'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      summary: シフト種類更新
      description: 指定されたシフト種類を更新
      tags:
        - シフト種類管理
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShiftTypeInput'
      responses:
        '200':
          description: シフト種類更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShiftType'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/shifts:
    get:
      summary: シフト一覧取得
      description: シフトの一覧を取得（部門・種類・期間絞り込み可能）
      tags:
        - シフト管理
      parameters:
        - name: departmentId
          in: query
          description: 部門IDでフィルタリング
          schema:
            type: integer
        - name: shiftTypeId
          in: query
          description: シフト種類IDでフィルタリング
          schema:
            type: integer
        - name: dateFrom
          in: query
          description: 開始日でフィルタリング
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          description: 終了日でフィルタリング
          schema:
            type: string
            format: date
      responses:
        '200':
          description: シフト一覧
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/ShiftWithStats'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: シフト作成
      description: 新しいシフトを作成
      tags:
        - シフト管理
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShiftInput'
      responses:
        '201':
          description: シフト作成成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ShiftWithStats'
                      message:
                        type: string
                        example: 'Shift operation completed successfully'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/shifts/prepare:
    get:
      summary: シフト準備（重複チェック・編集準備）
      description: 指定された日付・部門・シフト種類の組み合わせで既存シフトの重複チェックと編集準備を行う統合エンドポイント
      tags:
        - シフト管理
      parameters:
        - name: date
          in: query
          required: true
          description: シフト日付（YYYY-MM-DD形式）
          schema:
            type: string
            format: date
            example: '2024-01-15'
        - name: departmentId
          in: query
          required: true
          description: 部門ID
          schema:
            type: integer
            example: 1
        - name: shiftTypeId
          in: query
          required: true
          description: シフト種類ID
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: シフト準備完了（新規作成モードまたは編集モード）
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrepareShiftResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/shifts/[id]:
    parameters:
      - $ref: '#/components/parameters/Id'

    get:
      summary: シフト詳細取得
      description: 指定されたシフトの詳細情報を取得（割り当て統計付き）
      tags:
        - シフト管理
      responses:
        '200':
          description: シフト詳細
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ShiftWithStats'
                      message:
                        type: string
                        example: 'Shift operation completed successfully'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/invitations:
    post:
      summary: 招待トークン作成
      description: 管理者またはマネージャーが新しい招待トークンを作成します。
      tags:
        - 招待管理
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationCreateInput'
      responses:
        '201':
          description: 招待トークンの作成に成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/InvitationUrl'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

    get:
      summary: 招待トークン一覧取得
      description: 作成済みの招待トークン一覧を取得します。管理者は `showAll=true` で全件取得できます。
      tags:
        - 招待管理
      security:
        - bearerAuth: []
      parameters:
        - name: includeInactive
          in: query
          description: 無効化済みトークンを含める場合は `true`
          schema:
            type: boolean
        - name: showAll
          in: query
          description: 管理者のみ指定可能。全ユーザーのトークンを表示します。
          schema:
            type: boolean
      responses:
        '200':
          description: 招待トークン一覧
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiListResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/InvitationToken'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/invitations/{token}:
    parameters:
      - name: token
        in: path
        required: true
        description: 招待トークン文字列
        schema:
          type: string

    delete:
      summary: 招待トークン無効化
      description: 管理者または作成者が招待トークンを無効化します。
      tags:
        - 招待管理
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 招待トークンの無効化に成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/InvitationDeactivation'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: すでに無効化済み
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
              example:
                success: false
                error: 'Invitation token is already inactive'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/invitations/active:
    get:
      summary: 最新の有効な招待トークン取得
      description: 現在利用可能な最新の招待トークン情報を返します。
      tags:
        - 招待管理
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 有効な招待トークン情報
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ActiveInvitation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/auth/invitations/{token}/verify:
    parameters:
      - name: token
        in: path
        required: true
        description: 招待トークン文字列
        schema:
          type: string

    get:
      summary: 招待トークン検証
      description: 認証なしで招待トークンの有効性を検証します。
      tags:
        - 招待管理
      responses:
        '200':
          description: 招待トークンが有効
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/InvitationValidation'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '410':
          description: トークンは存在したが現在は利用不可
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
              example:
                success: false
                error: 'Expired invitation token'
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      summary: シフト更新
      description: 指定されたシフトを更新
      tags:
        - シフト管理
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShiftInput'
      responses:
        '200':
          description: シフト更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ShiftWithStats'
                      message:
                        type: string
                        example: 'Shift operation completed successfully'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      summary: シフト削除
      description: 指定されたシフトを削除
      tags:
        - シフト管理
      responses:
        '204':
          description: 削除成功（レスポンス本文なし）
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  parameters:
    Id:
      name: id
      in: path
      required: true
      description: リソースのID
      schema:
        type: integer

  responses:
    NotFound:
      description: リソースが見つかりません
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponse'
          example:
            success: false
            error: 'Resource not found'

    ValidationError:
      description: バリデーションエラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponse'
          example:
            success: false
            error: 'Validation failed'

    ServerError:
      description: サーバーエラー
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponse'
          example:
            success: false
            error: 'Internal server error'

    Unauthorized:
      description: 認証が必要です
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponse'
          example:
            success: false
            error: 'Authentication token required'

    Forbidden:
      description: 権限が不足しています
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorResponse'
          example:
            success: false
            error: 'Insufficient permissions. Admin or Manager role required.'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # 軽量版スキーマ
    DepartmentSummary:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: 'スキー'

    InstructorSummary:
      type: object
      properties:
        id:
          type: integer
        lastName:
          type: string
          example: '山田'
        firstName:
          type: string
          example: '太郎'
        status:
          type: string
          enum: [ACTIVE, INACTIVE, RETIRED]
          default: ACTIVE

    CertificationSummary:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: 'スキー指導員'
        shortName:
          type: string
          example: '指導員'
        organization:
          type: string
          example: 'SAJ'
        department:
          $ref: '#/components/schemas/DepartmentSummary'

    # 基本レスポンス
    ApiResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          nullable: true
        error:
          type: string
          nullable: true
          example: null

    ApiListResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            type: object
        count:
          type: integer
          example: 10
        error:
          type: string
          nullable: true
          example: null

    ApiErrorResponse:
      type: object
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: 'Invalid invitation token'

    # 部門関連
    Department:
      type: object
      properties:
        id:
          type: integer
        code:
          type: string
          example: 'ski'
        name:
          type: string
          example: 'スキー'
        description:
          type: string
          nullable: true
        isActive:
          type: boolean
          default: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    DepartmentInput:
      type: object
      required:
        - code
        - name
      properties:
        code:
          type: string
          example: 'ski'
        name:
          type: string
          example: 'スキー'
        description:
          type: string
          nullable: true
        isActive:
          type: boolean
          default: true

    # 資格関連
    Certification:
      type: object
      properties:
        id:
          type: integer
        departmentId:
          type: integer
        name:
          type: string
          example: 'スキー指導員'
        shortName:
          type: string
          example: '指導員'
        organization:
          type: string
          example: 'SAJ'
        description:
          type: string
          nullable: true
        isActive:
          type: boolean
          default: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        department:
          $ref: '#/components/schemas/DepartmentSummary'

    CertificationInput:
      type: object
      required:
        - departmentId
        - name
        - shortName
        - organization
      properties:
        departmentId:
          type: integer
        name:
          type: string
          example: 'スキー指導員'
        shortName:
          type: string
          example: '指導員'
        organization:
          type: string
          example: 'SAJ'
        description:
          type: string
          nullable: true
        isActive:
          type: boolean
          default: true

    CertificationDetail:
      allOf:
        - $ref: '#/components/schemas/Certification'
        - type: object
          properties:
            instructors:
              type: array
              items:
                $ref: '#/components/schemas/InstructorSummary'

    # インストラクター関連
    Instructor:
      type: object
      properties:
        id:
          type: integer
        lastName:
          type: string
          example: '山田'
        firstName:
          type: string
          example: '太郎'
        lastNameKana:
          type: string
          nullable: true
          example: 'ヤマダ'
        firstNameKana:
          type: string
          nullable: true
          example: 'タロウ'
        status:
          type: string
          enum: [ACTIVE, INACTIVE, RETIRED]
          default: ACTIVE
        notes:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    InstructorInput:
      type: object
      required:
        - lastName
        - firstName
      properties:
        lastName:
          type: string
          example: '山田'
        firstName:
          type: string
          example: '太郎'
        lastNameKana:
          type: string
          nullable: true
          example: 'ヤマダ'
        firstNameKana:
          type: string
          nullable: true
          example: 'タロウ'
        status:
          type: string
          enum: [ACTIVE, INACTIVE, RETIRED]
          default: ACTIVE
        notes:
          type: string
          nullable: true
        certificationIds:
          type: array
          items:
            type: integer
          description: '割り当てる資格IDの配列'
          example: [1, 3, 5]

    # シフト種類関連
    ShiftType:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: 'レッスン'
        isActive:
          type: boolean
          default: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ShiftTypeInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: 'レッスン'
        isActive:
          type: boolean
          default: true

    ShiftTypeDetail:
      $ref: '#/components/schemas/ShiftType'

    # シフト関連
    Shift:
      type: object
      properties:
        id:
          type: integer
        date:
          type: string
          format: date
        departmentId:
          type: integer
        shiftTypeId:
          type: integer
        description:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        department:
          $ref: '#/components/schemas/Department'
        shiftType:
          $ref: '#/components/schemas/ShiftType'

    ShiftInput:
      type: object
      required:
        - date
        - departmentId
        - shiftTypeId
      properties:
        date:
          type: string
          format: date
        departmentId:
          type: integer
        shiftTypeId:
          type: integer
        description:
          type: string
          nullable: true
        assignedInstructorIds:
          type: array
          items:
            type: integer
          description: '割り当てるインストラクターIDの配列'
          example: [1, 2, 3]

    ShiftWithStats:
      allOf:
        - $ref: '#/components/schemas/Shift'
        - type: object
          properties:
            assignments:
              type: array
              items:
                $ref: '#/components/schemas/ShiftAssignment'
            assignedCount:
              type: integer
              description: 現在割り当てられているインストラクター数

    # シフト割り当て関連
    ShiftAssignment:
      type: object
      properties:
        id:
          type: integer
        shiftId:
          type: integer
        instructorId:
          type: integer
        assignedAt:
          type: string
          format: date-time
        instructor:
          $ref: '#/components/schemas/InstructorSummary'

    ShiftAssignmentInput:
      type: object
      required:
        - shiftId
        - instructorId
      properties:
        shiftId:
          type: integer
        instructorId:
          type: integer

    ShiftAssignmentDetail:
      allOf:
        - $ref: '#/components/schemas/ShiftAssignment'
        - type: object
          properties:
            shift:
              allOf:
                - $ref: '#/components/schemas/Shift'
                - type: object
                  properties:
                    department:
                      $ref: '#/components/schemas/Department'
                    shiftType:
                      $ref: '#/components/schemas/ShiftType'
            instructor:
              allOf:
                - $ref: '#/components/schemas/Instructor'
                - type: object
                  properties:
                    certifications:
                      type: array
                      items:
                        $ref: '#/components/schemas/CertificationSummary'

    # シフト準備API専用レスポンス
    PrepareShiftResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            mode:
              type: string
              enum: ['create', 'edit']
              description: '作成モードまたは編集モード'
              example: 'edit'
            shift:
              allOf:
                - $ref: '#/components/schemas/ExistingShiftData'
                - type: object
                  nullable: true
                  description: '編集モードの場合の既存シフトデータ（新規作成モードではnull）'
            formData:
              $ref: '#/components/schemas/PrepareShiftFormData'
        error:
          type: string
          nullable: true
          example: null

    ExistingShiftData:
      type: object
      description: '既存シフトの詳細データ（編集モード用）'
      properties:
        id:
          type: integer
          example: 1
        date:
          type: string
          format: date
          example: '2024-01-15'
        departmentId:
          type: integer
          example: 1
        shiftTypeId:
          type: integer
          example: 2
        description:
          type: string
          nullable: true
          example: 'モーニングレッスン'
        department:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: 'スキー'
            code:
              type: string
              example: 'ski'
        shiftType:
          type: object
          properties:
            id:
              type: integer
              example: 2
            name:
              type: string
              example: 'レッスン'
        assignments:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              instructor:
                type: object
                properties:
                  id:
                    type: integer
                    example: 3
                  lastName:
                    type: string
                    example: '山田'
                  firstName:
                    type: string
                    example: '太郎'
        assignedCount:
          type: integer
          description: '現在割り当てられているインストラクター数'
          example: 2

    PrepareShiftFormData:
      type: object
      description: 'フォーム事前設定用のデータ'
      properties:
        date:
          type: string
          format: date
          example: '2024-01-15'
        departmentId:
          type: integer
          example: 1
        shiftTypeId:
          type: integer
          example: 2
        description:
          type: string
          nullable: true
          example: 'モーニングレッスン'
        selectedInstructorIds:
          type: array
          items:
            type: integer
          description: '事前選択されるインストラクターIDの配列'
          example: [3, 5]

    InvitationCreateInput:
      type: object
      required:
        - expiresAt
      properties:
        description:
          type: string
          nullable: true
          example: '新人スタッフ用招待'
        expiresAt:
          type: string
          format: date-time
          example: '2025-01-15T12:00:00Z'

    InvitationUrl:
      type: object
      properties:
        token:
          type: string
          example: 'inv_abcd1234'
        invitationUrl:
          type: string
          example: 'https://app.example.com/login?invite=inv_abcd1234'
        expiresAt:
          type: string
          format: date-time
        maxUses:
          type: integer
          nullable: true
          example: 5
        createdBy:
          type: string
          example: 'user_admin_01'

    InvitationToken:
      type: object
      properties:
        token:
          type: string
        description:
          type: string
        expiresAt:
          type: string
          format: date-time
        isActive:
          type: boolean
        maxUses:
          type: integer
          nullable: true
        usedCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        creatorName:
          type: string
        creatorRole:
          type: string
          enum: [ADMIN, MANAGER, MEMBER]
        isExpired:
          type: boolean
        remainingUses:
          type: integer
          nullable: true

    InvitationDeactivation:
      type: object
      properties:
        message:
          type: string
          example: 'Invitation token deactivated successfully'
        token:
          type: string
        deactivatedAt:
          type: string
          format: date-time
        deactivatedBy:
          type: string

    ActiveInvitation:
      type: object
      properties:
        token:
          type: string
        description:
          type: string
          nullable: true
        expiresAt:
          type: string
          format: date-time
        isActive:
          type: boolean
        maxUses:
          type: integer
          nullable: true
        usageCount:
          type: integer
        remainingUses:
          type: integer
          nullable: true
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string

    InvitationValidation:
      type: object
      required:
        - isValid
      properties:
        isValid:
          type: boolean
          example: true

tags:
  - name: システム
    description: システム関連のエンドポイント
  - name: 部門管理
    description: 部門（スキー・スノーボード）の管理
  - name: 資格管理
    description: 資格マスタの管理
  - name: インストラクター管理
    description: インストラクターの管理
  - name: シフト種類管理
    description: シフト種類マスタの管理
  - name: シフト管理
    description: シフト枠の管理
  - name: 招待管理
    description: 招待トークンおよび認証周りの管理
